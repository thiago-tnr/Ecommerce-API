{
    "openapi" : "3.0.0",
    "info" : {
        "title" : "Ecommerce API",
        "description" : "This is an API e-commerce with fake, but working, payment method",
        "version" : "1.0.0",
        "contact":{
            "email" : "tnr.rocha@gmail.com"
        }
    },
    "paths" : {
        "/user/create-user" :{
            "post" : {
                "sumary": "Create user",
                "description" : "Create a new user, to buy in the story. After creating this user, it is necessary to confirm the registration by email. check your inbox and see if you have received the confirmation email",
                "tags" : ["User"],

                "requestBody": {
                    "content" : {
                        "application/json": {
                            "schema" : {
                                "$ref": "#/components/schemas/User"
                            },  
                            "example" : {
                                "name" : "Thiago Swagger",
                                "email" : "tnr.rocha@gmail.com",
                                "password" : "12345678",
                                "isAdmin" : true
                            }
                        }
                    }
                },
                "responses": {
                    "202" : {
                        "description": "User created, Confirmation PENDDING "
                    },
                    "409 - Get User Email" : {
                        "description": "Email adress already used"
                    },
                    "409 - Get User Name" : {
                        "description": "UserName already used"
                    },
                    "400" : {
                        "description": "Password must be at least 8 characters long"
                    },
                    "400 - Link Verification" : {
                        "description": "Not possible to create the vefication"
                    }
                }
            }
        },
        "/user/verify/{userId}/{uniqueString}" :{
            "get" : {
                "sumary": "Verify created user",
                "description" : "After creating the user, a confirmation email will arrive, when clicking on the validation link, a new tab will open. Take this link and run it in Insomnia or take the userId and the uniqueString and use in the swagger",
                "tags" : ["User"],
                "parameters" : [
                    {
                        "name" : "userId",
                        "in" : "path",
                        "description" : "User Id to validate de cadastration",
                        "required" : true
                    },
                    {
                        "name" : "uniqueString",
                        "in" : "path",
                        "description" : "User Id to validate de cadastration",
                        "required" : true
                    }
                ],
                
                "responses": {
                    "202" : {
                        "description": "User created, Confirmation PENDDING "
                    },
                    "409 - Get User Email" : {
                        "description": "Email adress already used"
                    },
                    "409 - Get User Name" : {
                        "description": "UserName already used"
                    },
                    "400" : {
                        "description": "Password must be at least 8 characters long"
                    },
                    "400 - Link Verification" : {
                        "description": "Not possible to create the vefication"
                    }
                }
            }
        }
    },
    "components" : {
        "schemas" : {
            "User" : {
                "type":"object",
                "username": {
                    "type": "string"
                },
                "email" :{
                    "type": "string"
                },
                "password" :{
                    "type": "string"
                },
                "isAdmin" :{
                    "type": "boolean"
                }
            }
        },
        "securitySchemes": {
            "bearerAuth" : {
                "type" : "http",
                "scheme" : "bearer",
                "bearerFormat" : "JWT"
            }
        }
    }   
}